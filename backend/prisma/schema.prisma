generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // sessions      Session[]
  plans Meal[]
 
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt
  verified      Boolean? @default(false) 
  password      String
  // roles
  role RoleEnumType? @default(user)

  // verificationCode String? @db.Text @unique
  // @@unique([email, verificationCode, access_token])
  // @@index([email, verificationCode,access_token])
  
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

 
model Meal {
  id        Int      @id @default(autoincrement())
  date      DateTime
  breakfast String?
  lunch     String?
  dinner    String?
  snacks    String?
  notes     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}


enum RoleEnumType {
  user
  admin
}